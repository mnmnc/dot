#!/bin/sh
# void-container-manager

scriptDir=$(dirname `realpath -P "$0"`)
parentDir=$(dirname "${scriptDir}")

vcm_attach() {
  if ! test -f "${cntDir}/pid" || ! kill -0 $(cat "${cntDir}/pid") > /dev/null 2>&1; then
    printf '[%s] Container %s is not running!\n' "$(date +'%X')" "${cntName}"
    test -f "${cntDir}/pid" && rm "${cntDir}/pid"
    exit 1
  fi

  printf '[%s] Resuming screen %s ...\n' "$(date +'%X')" "cnt-${cntName}"
  screen -r "cnt-${cntName}"

  if ! kill -0 $(cat "${cntDir}/pid") > /dev/null 2>&1 ; then
    printf '[%s] Screen %s closed!\n' "$(date +'%X')" "cnt-${cntName}"
    rm "${cntDir}/pid"
  fi
}

vcm_backup() {
  bakFile="/data/vrt/cnt/pub/${cntName}-TS-$(date +'%s').tar.gz"
  printf '[%s] Backing up %s as %s...\n' "$(date +'%X')" "${cntName}" "${bakFile}"
  tar --xattrs -czpvf "${bakFile}" "${cntDir}"
}

vcm_create() {
  test -z "${cntName}" && cntName="${1:-$(date +'%Y%m%d-%H%M%S')}"
  test -z "${cntDir}" && cntDir="/data/vrt/cnt/pub/${cntName}"

  if test -d "${cntDir}"; then
    printf '[%s] Container %s already exists!\n' "$(date +'%X')" "${cntName}"
    exit 1
  fi

  printf '[%s] Creating container directory %s ...\n' "$(date +'%X')" "${cntDir}"
  mkdir -p "${cntDir}" || exit 1

  #printf '[%s] Setting permissions on %s to %s:%s ...\n' "$(date +'%X')" "${cntName}" "${USER}" "${USER}"
  #chown -R "${USER}:${USER}" "${cntDir}" || exit 1

  printf '[%s] Entering container %s ...\n' "$(date +'%X')" "${cntName}"
  cd "${cntDir}" || exit 1

  if test 1 -eq 1; then
    printf '[%s] Copying xbps-confs ...\n' "$(date +'%X')"
    mkdir -p "${cntDir}/var/db/xbps/keys" "${cntDir}/usr/share"
    cp -a /usr/share/xbps.d "${cntDir}/usr/share/"
    cp /var/db/xbps/keys/*.plist "${cntDir}/var/db/xbps/keys"

    printf '[%s] Installing base-files ...\n' "$(date +'%X')"
    xbps-install -r "${cntDir}" -Sy base-files > "${cntDir}/vcm.log" || exit 1

    printf '[%s] Configuring base-files ...\n' "$(date +'%X')"
    xbps-reconfigure -r "${cntDir}" -f base-files > "${cntDir}/vcm.log" || exit 1

    printf '[%s] Installing remaining packages from %s ...\n' "$(date +'%X')" "${cntPkgs}"
    pkgs=$(cat "${cntPkgs}" | sed -e '/\s*#.*$/d' -e '/^\s*$/d' | tr '\n' ' ')
    xbps-install -r "${cntDir}" -y ${pkgs} > "${cntDir}/vcm.log" || exit 1

    printf '[%s] Copying container files ...\n' "$(date +'%X')"
    while IFS='' read -r line || test -n "${line}"; do
      cp ${line}
    done < "${cntFiles}"

    #printf '[%s] Setting permissions on %s to %s:%s ...\n' "$(date +'%X')" "/root" "1337" "1337"
    #mkdir "${cntDir}/root"
    #chmod 1337:1337 -r "${cntDir}/root"

    test -f "${cntDir}/vcm.log" && rm "${cntDir}/vcm.log"
    #for pkgName in $(cat "${cntPkgs}"); do
    #  printf '[%s] Installing %s ...\n' "$(date +'%X')" "${pkgName}"
    #  xbps-install -r "${cntDir}" "${pkgName}"
    #done
  else
    printf '[%s] Creating container image ...\n' "$(date +'%X')"
    tar -c -f - -C / usr | pseudo tar -x -f -

    printf '[%s] Creating symlinks ...\n' "$(date +'%X')"
    ln -s usr/bin bin
    ln -s usr/lib lib
    ln -s usr/lib lib64
    ln -s usr/lib32 lib32
    ln -s usr/sbin sbin
  fi
}

vcm_destroy() {
  printf '[%s] Are you sure to destroy %s? ...\n' "$(date +'%X')" "${cntName}"
  read -p ': ' answ

  case "${answ}" in
    y|Y|yes|YES) rm -rf "${cntDir}"; printf '[%s] Container %s has been destroyed ...\n' "$(date +'%X')" "${cntName}";;
  esac
}

vcm_help() {
  cat <<EOT
Usage: $(basename $0) <action> [opts]

ACTIONS
  [a]ttach      Attach to a running container session
  [c]reate      Create a new container
  [d]estroy     Destroy existing container
  [i]nstall     Install pkg in container
  [l]ist        List all existing containers
  [r]un         Run container
  [s]top        Stop container
  [u]ninstall   Uninstall pkg from container

ENV-VARS
  cntName, cntDir, cntPkgs
EOT
  exit 1
}

vcm_inject() {
  if ! test -f "${cntDir}/pid" || ! kill -0 $(cat "${cntDir}/pid") > /dev/null 2>&1; then
    printf '[%s] Container %s is not running!\n' "$(date +'%X')" "${cntName}"
    exit 1
  fi

  printf '[%s] Injecting into %s with %s \n' "$(date +'%X')" "${cntName}" "${@}"
  inject $(cat "${cntDir}/pid") ${@}
}

vcm_install() {
  printf '[%s] Running install ...\n' "$(date +'%X')"
  xbps-install -r "${cntDir}" ${@} #| sed -e 's/^/[cnt] /'
}

vcm_list() {
  printf '[%s] Listing containers ...\n' "$(date +'%X')"
  find '/data/vrt/cnt/pub' -mindepth 1 -maxdepth 1 -type d | sed 's|/data/vrt/cnt/pub/||g'
}

vcm_pkg() {
  printf '[%s] Running pkgdb ...\n' "$(date +'%X')"
  xbps-pkgdb -r "${cntDir}" ${@} #| sed -e 's/^/[cnt] /'
}

vcm_query() {
  printf '[%s] Querying pkgs ...\n' "$(date +'%X')"
  xbps-query -r "${cntDir}" ${@} #| sed -e 's/^/[cnt] /'
}

vcm_update() {
  xbps-install -r "${cntDir}" -Su ${@} #| sed -e 's/^/[cnt] /'
}

vcm_run() {
  if test -f "${cntDir}/pid"; then
    cntPID=$(cat "${cntDir}/pid")
    kill -0 "${cntPID}" > /dev/null 2>&1 || rm "${cntDir}/pid"
  fi

  if test -f "${cntDir}/pid"; then
    printf '[%s] Container %s already running under PID %s ...\n' "$(date +'%X')" "${cntName}" "${cntPID}"
    printf '[%s] Resume screen session %s!\n' "$(date +'%X')" "cnt-${cntName}"
    exit 1
  fi

  printf '[%s] Running container as screen session %s ...\n' "$(date +'%X')" "cnt-${cntName}"
  (cd "${cntDir}" && screen -d -m -S "cnt-${cntName}" /bin/sh -c 'contain . /bin/sh' && sleep 0.1)
  #(cd "${cntDir}" && screen -d -m -S "cnt-${cntName}" /bin/sh -c 'contain . /bin/runit' && sleep 0.1)

  cntPID=$(screen -ls "cnt-${cntName}" | grep 'tached' | awk -F '.' '{print $1}' | grep -o '[0-9]*')
  if test -z "${cntPID}"; then
    printf '[%s] Container %s did not start!\n' "$(date +'%X')" "${cntName}"
    test -f "${cntDir}/pid" && rm "${cntDir}/pid"
    exit 1
  fi
  printf '[%s] Screen %s running as PID %s ...\n' "$(date +'%X')" "cnt-${cntName}" "${cntPID}"
  printf '%s' "${cntPID}" > "${cntDir}/pid"
}

vcm_xephyr_app() {
  #(cd "${cntDir}" && contain . /bin/sh -l -c "/bin/xinit \"${1}\" -- :1")
  #(cd "${cntDir}" && contain . /bin/sh -l -c "${1}")

  cntCmd="${1:-st}"

  if ! pgrep 'Xephyr' > /dev/null; then
    printf '[%s] Start xephyr first! ...\n' "$(date +'%X')"
    exit 1
  fi

  (
    cd "${cntDir}"

    if ! grep -qs "tmp/.X11-unix/X${scrnCnt}" /proc/mounts; then
      printf '[%s] Binding host :%s to cnt :%s ...\n' "$(date +'%X')" "${scrnHst}" "${scrnCnt}"
      mkdir -p "tmp/.X11-unix"
      touch "tmp/.X11-unix/X${scrnCnt}"
      mount --bind "/tmp/.X11-unix/X${scrnHst}" "tmp/.X11-unix/X${scrnCnt}"
    fi

    printf '[%s] Running command "%s" inside container ...\n' "$(date +'%X')" "${cntCmd}"
    # https://bbs.archlinux.org/viewtopic.php?id=187234
    contain ${cntOpts} . /bin/sh -c "export DISPLAY=:0; export QT_X11_NO_MITSHM=1; export HOME='/tmp'; ${cntCmd}"

    printf '[%s] Cleaning up ...\n' "$(date +'%X')"
    if grep -qs "tmp/.X11-unix/X${scrnCnt}" /proc/mounts; then
      umount "tmp/.X11-unix/X${scrnCnt}"
      rm -rf "tmp/.X11-unix"
    fi
  )
}

vcm_xephyr_start() {
  if ! pgrep 'Xephyr' > /dev/null; then
    printf '[%s] Starting xephyr on DISPLAY :%s ...\n' "$(date +'%X')" "${scrnHst}"
    Xephyr ${xephOpts} ":${scrnHst}" &
    sleep 0.01
  else
    printf '[%s] Xephyr is already running ...\n' "$(date +'%X')"
  fi
}

vcm_xephyr_stop() {
  if pgrep 'Xephyr' > /dev/null; then
    printf '[%s] Stopping xephyr on DISPLAY :%s ...\n' "$(date +'%X')" "${scrnHst}"
    kill $(pgrep 'Xephyr')
  else
    printf '[%s] Start Xephyr first ...\n' "$(date +'%X')"
  fi
}

vcm_stop() {
  printf '[%s] Stopping container %s ...\n' "$(date +'%X')" "${cntName}"
  screen -X -S "cnt-${cntName}" quit
}

vcm_uninstall() {
  printf '[%s] Running remove ...\n' "$(date +'%X')"
  xbps-remove -r "${cntDir}" -R ${@} #| sed -e 's/^/[cnt] /'
}

test $# -eq 0 && vcm_help
act="${1}"; shift

test -z "${cntName}" && test $(dirname "${PWD}") = '/data/vrt/cnt/pub' && cntName=$(basename "${PWD}")

if test -z "${cntName}" && test $# -gt 0; then
  cntName="${1}"
  shift
fi

test ! -z "${cntName}" && test -z "${cntDir}" && cntDir="/data/vrt/cnt/pub/${cntName}"

if test ! -d "${cntDir}" && test "${act}" != 'c' && test "${act}" != 'l'; then
  printf '[%s] Container %s does not exist!\n' "$(date +'%X')" "${cntName}"
  exit 1
fi

test -z "${cntPkgs}" && cntPkgs="${parentDir}/conf/cnt.pkgs"
test -z "${cntFiles}" && cntFiles="${parentDir}/conf/cnt.files"

scrnH="1030"
scrnW="1680"
scrnHst="1" # Host screen number
scrnCnt="0" # Container screen number
xephOpts=" -br -ac -noreset -resizeable -screen ${screenW}:${scrnH}"

case "${act}" in
  a) vcm_attach ${@};;
  b) vcm_backup ${@};;
  c) vcm_create ${@};;
  d) vcm_destroy ${@};;
  i) vcm_install ${@};;
  l) vcm_list ${@};;
  #p) vcm_update ${@};;
  p) vcm_pkg ${@};;
  q) vcm_query ${@};;
  r) vcm_run ${@};;
  s) vcm_stop ${@};;
  u) vcm_uninstall ${@};;
  xa) vcm_xephyr_app ${@};;
  xs) vcm_xephyr_start ${@};;
  xt) vcm_xephyr_stop ${@};;
esac

# Todo: Disable buffering
# stdbuf -i0 -o0 -e0 